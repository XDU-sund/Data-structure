 #include<stdio.h>
 #include<stdlib.h>
 typedef int ElemType;
 typedef struct node{
 	ElemType data;      //数据域 
 	struct node *next;  //指针域 
 }LNode,*LinkList;     //LNode *L和LinkList L是等价的 
 
 LinkList GreatLinkList(int n){
 	//建立一个长度为n的链表
	 LinkList p,r,list = NULL;
	 ElemType e;
	 int i;
	 for (i = 1;i <= n;i++) 
	 {
	 	scanf("%d",&e);
	 	p = (LinkList)malloc(sizeof(LNode));
	 	p->data = e;
	 	p->next = NULL;
	 	if (!list)
	 	list = p;
	 	else r->next = p;
	 	r = p;
	 }
	 return list;
 }
 
void insertList(LinkList *list,LinkList q,ElemType e){
	//向链表中有指针q指出的节点后面插入节点，节点数据为e
	LinkList p;
	p = (LinkList)malloc(sizeof(LNode)) ;  //生成一个新节点，由p指向它
	p->data = e;          //向该节点的数据域赋值e
	if (!*list) {
		*list = p;        //list的内容为NULL表示该链表为空
		p->next = NULL; 
	}                    //当链表为空时q没有意义，只能再头节点后面插入第一个元素 
	else {
		p->next = q->next;   //当链表不为空时，认为q指向的节点一定存在
		/*将q指向的节点的next域的值赋值给p指向节点的next域*/
		q->next = p;      //将p的值赋值给q的next域 
	}
}
 
//从链表中删除节点
/*包含三种情况，1.q所指向的是链表的第一个节点
2.q所指向的节点的前驱结点的指针已知
3.q所指向的节点的前驱结点的指针未知    */
void delLink1(LinkList *list,LinkList r,LinkList q) {
	if (q == *list)      //删除链表节点的第一种情形
	*list = q->next;
	else 
	r->next = q->next;   //删除链表节点的第二种情形
	free(q) ;            //释放掉q所指向的空间 
}

void delLink(LinkList *list,LinkList q){
	LinkList r;
	if (q == *list){
		*list = q->next;
		free(q);
	}
	else{
		for (r = *list;r->next != q;r=r->next) ;  //遍历链表，找到q的前驱结点的指针
		if (r->next != NULL) {
			r->next = q->next;    //从链表中删除q指向的节点
			free(q) ;
		}
	}
}
 
//销毁一个链表
void destroyLinkList(LinkList *list) {
	LinkList p,q;
	p = *list;
	while (p){
		q = p->next;
		free(p);
		p = q;
	}
	*list = NULL;
}

int main(void)
{
	int e,i;
	LinkList l,q;
	q = l = GreatLinkList(1);    //创建一个链表节点，q和l指向该节点
	scanf("%d",&e) ;
	while (e)
	{
		insertList(&l,q,e);
		q = q->next;
		scanf("%d",&e);
	}
	q = l;
	printf("The content of the linklist\n");
	while (q)     //输出链表中的内容
	{
		printf("%d ",q->data);
		q = q->next;
	} 
	q = l;
	printf("\nDelete the fifth element\n");
	for (i = 0;i < 4;i++)    //将指针q指向链表的第5个元素
	{
		if (q == NULL)    //确保此时链表的长度大于等于5，否则是非法操作 
		{
			printf("The length of the linklist is smaller than 5 !");
			return 0;
		}
		
		q = q->next; 
	} 
	delLink(&l,q);   //找到链表中第5个元素，用q指向它，再删除q所指的节点
	q = l;
	while (q)       //打印出删除后的结果 
	{
		printf("%d ",q->data);
		q = q->next;
	}
	destroyLinkList(&l);   //销毁该链表
	return 0; 
}
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
